#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void merge(vector<int>& arr, int low, int mid, int high) {
    int left_size = mid - low + 1;
    int right_size = high - mid;
    
    // Create temporary arrays for the left and right halves
    vector<int> left(left_size);
    vector<int> right(right_size);
    
    // Copy data to the temporary arrays
    for (int i = 0; i < left_size; i++)
        left[i] = arr[low + i];
    for (int j = 0; j < right_size; j++)
        right[j] = arr[mid + 1 + j];
    
    int i = 0; // Index for the left subarray
    int j = 0; // Index for the right subarray
    int k = low; // Index for the merged array
    
    // Merge the temporary arrays back into the original array
    while (i < left_size && j < right_size) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }
    
    // Copy the remaining elements of the left subarray
    while (i < left_size) {
        arr[k] = left[i];
        i++;
        k++;
    }
    
    // Copy the remaining elements of the right subarray
    while (j < right_size) {
        arr[k] = right[j];
        j++;
        k++;
    }
}

void merge_sort_parallel(vector<int>& arr, int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                merge_sort_parallel(arr, low, mid); // Sort the left half
            }
            
            #pragma omp section
            {
                merge_sort_parallel(arr, mid + 1, high); // Sort the right half
            }
        }
        
        merge(arr, low, mid, high); // Merge the two sorted halves
    }
}

int main() {
    vector<int> arr = {9, 5, 1, 3, 8, 6, 2, 7, 4};
    int n = arr.size();
    
    cout << "Original array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;
    
    // Perform parallel merge sort
    merge_sort_parallel(arr, 0, n - 1);
    
    cout << "Sorted array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;
    
    return 0;
}