#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void bubble_sort_parallel(vector<int>& arr) {
    int n = arr.size();
    bool swapped = true;

    #pragma omp parallel default(none) shared(arr, n, swapped)
    {
        while (swapped) {
            swapped = false;

            #pragma omp for
            for (int i = 0; i < n - 1; i++) {
                if (arr[i] > arr[i + 1]) {
                    swap(arr[i], arr[i + 1]);
                    swapped = true;
                }
            }
        }
    }
}

int main() {
    vector<int> arr = {9, 5, 1, 3, 8, 6, 2, 7, 4};
    
    cout << "Original array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;
    
    // Perform parallel bubble sort
    bubble_sort_parallel(arr);
    
    cout << "Sorted array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;
    
    return 0;
}