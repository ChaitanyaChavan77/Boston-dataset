#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void merge(vector<int>& arr, int low, int mid, int high) {
        int i, j, k;
        int left_side = mid - low + 1;
        int right_side = high - mid;
        
        vector<int> left(left_side), right(right_side); // Create temporary arrays for the left and right halves
        
        // Copy data to the temporary arrays
        for (i = 0; i < right_side; i++) {
                left[i] = arr[low + i];
        }
        for (j = 0; j < right_side; j++) {
                right[j] = arr[mid + 1 + j];
        }
        
        i = 0; // Index for the left subarray
        j = 0; // Index for the right subarray
        k = low; // Index for the merged array

        // Merge the temporary arrays back into the original array
        while (i < left_side && j < right_side) {
                if (left[i] <= right[j]) {
                        arr[k++] = left[i++];
                } else {
                        arr[k++] = right[j++];
                }
        }
}

void merge_sort(vector<int>& arr, int low, int high) {
        if (low < high) {
                int mid = low + (high - low) / 2;
#pragma omp task
                merge_sort(arr, low, mid);
#pragma omp task
                merge_sort(arr, mid + 1, high);
                merge(arr, low, mid, high);
        }
}

void parallel_merge_sort(vector<int>& arr) {
#pragma omp parallel
        {
#pragma omp single
                merge_sort(arr, 0, arr.size() - 1);
        }
}

int main() {
        vector<int> arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
        double start, end;
        // Measure performance of sequential merge sort
        start = omp_get_wtime();
        merge_sort(arr, 0, arr.size() - 1);
        end = omp_get_wtime();
        cout << "Sequential merge sort time: " << end - start <<endl;
        // Measure performance of parallel merge sort
        arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
        start = omp_get_wtime();
        parallel_merge_sort(arr);
        end = omp_get_wtime();
        cout << "Parallel merge sort time: " << end - start <<endl;
        return 0;
        }